#!/bin/bash

# Control a cyber-dojo web server.
# The aim is for all commands to forward to a cyber-dojo commander container.
# A few commands have to be handled locally.

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

exit_success() {
  exit 0
}

exit_fail() {
  exit 1
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

hash docker 2> /dev/null
if [ $? != 0 ]; then
  echo 'docker is not installed'
  echo 'See http://blog.cyber-dojo.org/2016/08/running-your-own-cyber-dojo-web-server.html'
  exit_fail
fi

docker_version=$(docker --version | awk '{print $3}' | sed '$s/.$//')
cyber_dojo_commander=cyberdojo/commander:${docker_version}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

delegate_to_commander() {
  docker run \
    --rm \
    --user=root \
    --volume=/var/run/docker.sock:/var/run/docker.sock \
    ${cyber_dojo_commander} \
    /app/cyber-dojo.sh $*
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if_sh_then_handle_locally_and_exit() {
  if [ "$*" = "sh" ]; then
    local name='cyber-dojo-web'
    if running_container ${name}; then
      docker exec --interactive --tty ${name} sh
      exit_success
    else
      exit_fail "${name} is not running"
    fi
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

running_container() {
  local space='\s'
  local name=$1
  local end_of_line='$'
  docker ps --filter "name=${name}" | grep "${space}${name}${end_of_line}" > /dev/null
  return $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if_update_then_handle_locally_and_exit() {
  if [ "$*" = "update" ]; then
    docker pull ${cyber_dojo_commander} # update commander image
    delegate_to_commander $*            # update other images
    # replace myself. See https://bani.com.br/2013/04/shell-script-that-updates-itself/
    local cid=$(docker create ${cyber_dojo_commander})
    local new_me=/tmp/cyber-dojo.new
    docker cp ${cid}:/cyber-dojo ${new_me}
    docker rm ${cid} > /dev/null
    chmod +x ${new_me}
    cp ${new_me} $0
    rm ${new_me}
    exit_success
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

g_cid=''      # if this is not '' then clean_up [docker rm]'s the container
g_vol=''      # if this is not '' then clean_up [docker volume rm]'s the volume

if_start_point_create_dir_then_handle_locally_and_exit() {

  # TODO: if $5 != '' OR other-error ... need to show start-point create HELP

  local name=$3
  local lhs=$(echo $4 | cut -f1 -s -d=)
  local dir=$(echo $4 | cut -f2 -s -d=)
  if [ "$1" = 'start-point' ] && [ "$2" = 'create' ] &&
     [ "${lhs}" = '--dir' ] && [ "${dir}" != '' ]; then

    if start_point_exists ${name}; then
      exit_fail "A start-point called ${name} already exists"
    fi
    if [ ! -d ${dir} ]; then
      exit_fail "Dir ${dir} does not exist"
    fi

    # 1. make an empty docker volume with the given name
    command="docker volume create --name=${name} --label=cyber-dojo-start-point=${src}"
    run_quiet "${command}" || clean_up_and_exit_fail '[docker volume create] failed!?'
    g_vol=${name}

    # 2. mount empty volume inside docker container
    command="docker create
                 --interactive
                 --user=root
                 --volume=${name}:/data
                 ${cyber_dojo_commander} sh"
    g_cid=`${command}`
    command="docker start ${g_cid}"
    run_quiet "${command}" || clean_up_and_exit_fail '[docker start] failed!?'

    # 3. fill empty volume from local dir
    command="docker cp ${dir}/. ${g_cid}:/data"
    run_quiet "${command}" || clean_up_and_exit_fail '[docker cp] failed!?'

    # 4. ensure cyber-dojo user owns everything in the volume
    command="docker exec ${g_cid} sh -c 'chown -R cyber-dojo:cyber-dojo /data'"
    run_quiet "${command}" || clean_up_and_exit_fail '[docker exec chown] failed!?'

    # 5. check the volume is a good start-point
    command="docker exec ${g_cid} sh -c './start_point_check.rb /data'"
    run_loud "${command}" || clean_up_and_exit_fail

    # clean up everything used to create the volume, but not the volume itself
    g_vol=''
    clean_up
    exit_success
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

start_point_exists() {
  # don't match a substring
  local start_of_line='^'
  local start_point=$1
  local end_of_line='$'
  docker volume ls --quiet | grep "${start_of_line}${start_point}${end_of_line}" > /dev/null
  return $?
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

run_quiet() {
  local me='run_quiet'
  local command="$1"
  debug "${me}: command=${command}"
  eval ${command} > /dev/null 2>&1
  local exit_status=$?
  debug "${me}: exit_status=${exit_status}"
  return ${exit_status}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

run_loud() {
  local me='run_loud'
  local command="$1"
  debug "${me}: command=${command}"
  eval ${command} > /dev/null
  local exit_status=$?
  debug "${me}: exit_status=${exit_status}"
  return ${exit_status}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

clean_up_and_exit_fail() {
  echo $1
  clean_up
  exit_fail
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

clean_up() {
  local me='clean_up'
  # remove docker container?
  if [ "${g_cid}" != '' ]; then
    debug "${me}: doing [docker rm -f ${g_cid}]"
    docker rm -f ${g_cid} > /dev/null 2>&1
  else
    debug "${me}: g_cid='' -> NOT doing [docker rm]"
  fi
  # remove docker volume?
  if [ "${g_vol}" != '' ]; then
    debug "${me}: doing [docker volume rm ${g_vol}]"
    # previous [docker rm] command seems to sometimes complete
    # before it is safe to remove its volume?!
    sleep 1s
    docker volume rm ${g_vol} > /dev/null 2>&1
  else
    debug "${me}: g_vol='' -> NOT doing [docker volume rm]"
  fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

debug() {
  # Use 'echo $1' to debug.
  #echo $1
  # Use ':' to not debug
  :
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

if_sh_then_handle_locally_and_exit $*
if_update_then_handle_locally_and_exit $*
if_start_point_create_dir_then_handle_locally_and_exit $*
delegate_to_commander $*
